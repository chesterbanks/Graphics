background(178, 185, 181);

strokeWeight(15);
noFill();
for(var i = 150; i < 300; i += 33){
    stroke(230, 108, 141, 300 - i);
    ellipse(250, 300, i, i);
}
stroke(230, 108, 141, 30);
fill(255, 234, 234, 200);
ellipse(250, 300, 150, 150);

fill(137, 142, 143);
rect(0, 468, width, 200);

strokeWeight(3);
stroke(255, 255, 255, 200);
for(var i = 0; i < 133; i += 3){
    line(250 + i + random(-5, 5), 470 + i, 250 - i - random(-5, 5), 470 + i);
}
for(var i = 0; i < 133; i += 3){
    stroke(219, 150, 199, random(100));
    line(250 + i + random(-i, 5), 470 + i, 250 - i - random(-5, 5), 470 + i);
    stroke(0, 0, 0, random(20));
    line(250 + i + random(-5, 5), 470 + i, 250 - i - random(-10, 5), 470 + i);
}

for(var i = 0; i < 200; i += 20){
    noStroke();
    fill(137 - (i / 3), 145 - (i / 4), 146 - (i / 4), 240);
    pushMatrix();
    translate(i, 150 + i);
    beginShape();
    vertex(380, 253);
    bezierVertex(461, 277, 524, 91, 503, 324);
    bezierVertex(397, 304, 347, 323, 250, 320);
    bezierVertex(326, 298, 294, 281, 365, 253);
    endShape(CLOSE);
    popMatrix();
}
for(var i = 0; i < 200; i += 20){
    noStroke();
    fill(137 - (i / 3), 145 - (i / 4), 146 - (i / 4));
    pushMatrix();
    translate(500 - i, 150 + i);
    scale(-1, 1.0);
    beginShape();
    vertex(380, 253);
    bezierVertex(461, 277, 524, 91, 503, 324);
    bezierVertex(397, 304, 347, 323, 250, 320);
    bezierVertex(326, 298, 294, 281, 365, 253);
    endShape(CLOSE);
    popMatrix();
}


pushMatrix();
translate(139, 5);
scale(1, 1.5);
strokeWeight(2);
stroke(120, 120, 120);
fill(38, 38, 38);

// WHAT A MUMBO JUMBO. o_O
beginShape();
vertex(263, 393);vertex(250, 379);vertex(248, 340);vertex(250, 295);vertex(249, 269);vertex(250, 252);vertex(224, 225);vertex(187, 218);vertex(135, 225);vertex(114, 240);vertex(102, 262);vertex(93, 276);vertex(74, 267);vertex(90, 263);vertex(99, 248);vertex(103, 238);vertex(59, 242);vertex(34, 220);vertex(63, 229);vertex(104, 226);vertex(131, 216);vertex(140, 210);vertex(102, 199);vertex(78, 187);vertex(61, 167);vertex(53, 150);vertex(41, 142);vertex(46, 135);vertex(56, 143);vertex(69, 152);vertex(70, 163);vertex(76, 163);vertex(75, 146);vertex(75, 133);vertex(81, 130);vertex(83, 143);vertex(82, 154);vertex(83, 166);vertex(83, 175);vertex(96, 184);vertex(124, 194);vertex(150, 198);vertex(171, 202);vertex(157, 161);vertex(141, 148);vertex(126, 140);vertex(107, 125);vertex(98, 104);vertex(90, 97);vertex(70, 89);vertex(64, 72);vertex(75, 83);vertex(88, 90);vertex(94, 81);vertex(91, 66);vertex(78, 50);vertex(101, 65);vertex(102, 85);vertex(100, 93);vertex(107, 106);vertex(116, 122);vertex(125, 128);vertex(126, 117);vertex(130, 103);vertex(141, 97);vertex(153, 94);vertex(154, 83);vertex(159, 99);vertex(152, 104);vertex(142, 110);vertex(137, 113);vertex(135, 126);vertex(134, 131);vertex(146, 143);vertex(157, 146);vertex(167, 155);vertex(169, 145);vertex(173, 163);vertex(171, 167);vertex(174, 183);vertex(197, 203);vertex(214, 210);vertex(231, 214);vertex(229, 201);vertex(228, 182);vertex(235, 159);vertex(239, 150);vertex(233, 141);vertex(223, 127);vertex(213, 113);vertex(212, 101);vertex(212, 88);vertex(219, 82);vertex(223, 104);vertex(233, 125);vertex(244, 136);vertex(250, 130);vertex(250, 112);vertex(252, 92);vertex(259, 82);vertex(256, 66);vertex(246, 50);vertex(245, 36);vertex(258, 24);vertex(256, 46);vertex(266, 70);vertex(265, 98);vertex(286, 86);vertex(288, 68);vertex(297, 60);vertex(307, 62);vertex(311, 72);vertex(305, 71);vertex(297, 74);vertex(297, 83);vertex(288, 99);vertex(279, 104);vertex(269, 108);vertex(262, 112);vertex(261, 117);vertex(259, 141);vertex(252, 162);vertex(244, 171);vertex(242, 189);vertex(246, 213);vertex(255, 218);vertex(262, 213);vertex(279, 203);vertex(292, 199);vertex(310, 191);vertex(320, 180);vertex(326, 166);vertex(331, 147);vertex(335, 129);vertex(342, 110);vertex(353, 101);vertex(373, 101);vertex(394, 107);vertex(403, 107);vertex(402, 115);vertex(386, 113);vertex(373, 113);vertex(359, 115);vertex(350, 122);vertex(347, 134);vertex(370, 130);vertex(368, 141);vertex(346, 142);vertex(335, 165);vertex(349, 167);vertex(363, 162);vertex(371, 154);vertex(386, 140);vertex(402, 134);vertex(414, 137);vertex(404, 141);vertex(396, 146);vertex(393, 156);vertex(407, 154);vertex(415, 151);vertex(417, 154);vertex(407, 158);vertex(391, 161);vertex(379, 161);vertex(374, 164);vertex(362, 171);vertex(346, 175);vertex(335, 176);vertex(329, 189);vertex(317, 203);vertex(304, 210);vertex(319, 211);vertex(335, 217);vertex(351, 222);vertex(376, 224);vertex(398, 225);vertex(413, 218);vertex(424, 210);vertex(448, 199);vertex(464, 201);vertex(469, 215);vertex(463, 215);vertex(452, 214);vertex(437, 221);vertex(420, 226);vertex(407, 232);vertex(423, 235);vertex(435, 239);vertex(435, 249);vertex(432, 246);vertex(415, 243);vertex(402, 236);vertex(388, 235);vertex(375, 235);vertex(357, 235);vertex(345, 233);vertex(346, 241);vertex(354, 248);vertex(367, 250);vertex(372, 248);vertex(373, 255);vertex(354, 257);vertex(342, 249);vertex(330, 235);vertex(325, 230);vertex(302, 227);vertex(290, 231);vertex(295, 378);vertex(296, 388);vertex(302, 397);vertex(243, 393);vertex(243, 398);
endShape();
popMatrix();

noStroke();
for(var i = 0; i < 360; i += 6){
    for(var j = 0; j < 174; j += 12){
        fill(223, 127 + random(-20, 30), 164 + random(-20, 20), random(150, 255));
        ellipse(random(-50, 50) + 417 + sin(i) * j * 1.6, 240 + cos(i) * j, 20, 20);
    }
}
